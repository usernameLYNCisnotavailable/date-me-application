// Firestore security rules for Lync Tree
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }
    function isOwner(uid) {
      return isSignedIn() && request.auth.uid == uid;
    }
    function ageFromBirthdate(dateStr) {
      // Client must provide computed age and we validate ranges instead of recomputing here.
      return 0; // placeholder; we gate by structure below.
    }

    // Public handle map read-only
    match /handles/{handle} {
      allow read: if true;
      allow write: if isSignedIn(); // written on profile init only
    }

    // Publicly readable user profiles (limited fields)
    match /users/{uid} {
      allow read: if true;
      allow write: if isOwner(uid);
    }

    // Questions for a profile
    match /profiles/{uid} {
      allow read: if true;
      allow write: if isOwner(uid)
        && request.resource.data.keys().hasOnly(['questions','updatedAt'])
        && request.resource.data.questions is list
        && request.resource.data.questions.size() >= 2
        && request.resource.data.questions.size() <= 7
        && request.resource.data.questions[0] is string;
    }

    // Applications received by a user
    match /users/{creator}/applications/{responder} {
      allow read: if isOwner(creator); // only creator sees their inbox
      allow create: if isSignedIn()
        && request.auth.uid == responder
        && !exists(/databases/$(database)/documents/users/$(creator)/applications/$(responder))
        && request.resource.data.answers is list
        && request.resource.data.answers.size() <= 7
        && request.resource.data.status == "pending";
      allow update: if isOwner(creator)
        && request.resource.data.status in ["pending","accepted","rejected"];
      allow delete: if false;
    }

    // Sent requests list
    match /users/{uid}/sentRequests/{other} {
      allow read: if isOwner(uid);
      allow write: if isOwner(uid);
    }

    // Friendships (undirected)
    match /friendships/{pairId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn(); // accept uses this; real app should constrain better
    }

    // Messaging subcollections under /friendships/{pairId}/messages/{msgId}
    match /friendships/{pairId}/messages/{msgId} {
      allow read, create: if isSignedIn()
        && pairId.matches('^[A-Za-z0-9_]+_[A-Za-z0-9_]+$');
      allow update, delete: if false;
    }

    // Reports and moderation
    match /reports/{id} {
      allow create: if isSignedIn();
      allow read, update: if isSignedIn() && request.auth.token.admin == true;
    }
    match /suspicions/{id} {
      allow create: if isSignedIn();
      allow read, update: if isSignedIn() && request.auth.token.admin == true;
    }
    match /moderation/{id} {
      allow read, write: if isSignedIn() && request.auth.token.admin == true;
    }
  }
}
