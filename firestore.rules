rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ---------- helpers ----------
    function isSignedIn() {
      return request.auth != null;
    }
    function isOwner(uid) {
      return isSignedIn() && request.auth.uid == uid;
    }
    // array contains helper (because hasAny/hasOnly are clunky)
    function arrContains(arr, v) {
      return arr.size() > 0 && arr.values().hasOnly(arr.values()) && v in arr;
    }

    // ---------- handles (unique usernames) ----------
    match /handles/{handle} {
      allow read: if true;
      // Claimed only by signed-in users. No updates/deletes.
      allow create: if isSignedIn()
        && !exists(/databases/$(database)/documents/handles/$(handle));
      allow update, delete: if false;
    }

    // ---------- users (public-ish profile base doc) ----------
    match /users/{uid} {
      // Public read is OK; keep sensitive fields out of this doc.
      allow read: if true;

      // Only the owner can write; prevent clients from giving themselves admin.
      allow write: if isOwner(uid)
        && !( "admin" in request.resource.data )  // don't let clients set admin flags here
        ;

      // Sent requests mirror under user
      match /sentRequests/{other} {
        allow read, write: if isOwner(uid);
      }

      // Inbox: applications received by a creator from a responder
      match /applications/{responder} {
        // Only the creator sees their inbox
        allow read: if isOwner(uid);

        // Create exactly once, by the responder themselves, with sane payload
        allow create: if isSignedIn()
          && request.auth.uid == responder
          && !exists(/databases/$(database)/documents/users/$(uid)/applications/$(responder))
          && request.resource.data.answers is list
          && request.resource.data.answers.size() >= 1
          && request.resource.data.answers.size() <= 7
          && request.resource.data.status == "pending";

        // Creator can move status between allowed values
        allow update: if isOwner(uid)
          && request.resource.data.status in ["pending","accepted","rejected"];

        allow delete: if false;
      }
    }

    // ---------- profiles (public questions for each user) ----------
    match /profiles/{uid} {
      allow read: if true;

      // Owner may set questions with tight limits
      allow write: if isOwner(uid)
        && request.resource.data.keys().hasOnly(['questions','updatedAt'])
        && request.resource.data.questions is list
        && request.resource.data.questions.size() >= 2
        && request.resource.data.questions.size() <= 7
        // at least first element is string (cheap type guard; list is capped at 7 anyway)
        && request.resource.data.questions[0] is string;
    }

    // ---------- friendships (undirected pair doc) ----------
    // Store array field users: [uidA, uidB] sorted
    match /friendships/{pairId} {
      // Read only if you're part of it
      allow read: if isSignedIn()
        && arrContains(resource.data.users, request.auth.uid);

      // Create/update only if:
      // - signed in
      // - the doc has exactly 2 users
      // - the caller is one of them
      allow create, update: if isSignedIn()
        && request.resource.data.users is list
        && request.resource.data.users.size() == 2
        && arrContains(request.resource.data.users, request.auth.uid);

      // No deletes for now
      allow delete: if false;

      // Messages: visible only to the two users in parent doc
      match /messages/{msgId} {
        allow read, create: if isSignedIn()
          && arrContains(get(/databases/$(database)/documents/friendships/$(pairId)).data.users, request.auth.uid);
        allow update, delete: if false;
      }
    }

    // ---------- moderation & reports ----------
    // Youâ€™ll use custom auth claims to mark moderators: request.auth.token.admin == true
    match /reports/{id} {
      allow create: if isSignedIn(); // any user can report
      allow read, update: if isSignedIn() && request.auth.token.admin == true;
    }
    match /suspicions/{id} {
      allow create: if isSignedIn();
      allow read, update: if isSignedIn() && request.auth.token.admin == true;
    }
    match /moderation/{id} {
      allow read, write: if isSignedIn() && request.auth.token.admin == true;
    }
  }
}
